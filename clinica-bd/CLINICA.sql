CREATE TABLE PACIENTE (
    COD_PAC SERIAL PRIMARY KEY,
    CPF TEXT UNIQUE NOT NULL,
    NOME TEXT NOT NULL,
    CONTATO TEXT,
    ENDERECO TEXT
);

CREATE TABLE MEDICAMENTO (
    COD_MED SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    BULA TEXT
);

CREATE TABLE CARGO (
    COD_CARGO SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    SALARIO NUMERIC(10, 2) NOT NULL
);

CREATE TABLE FUNCIONARIO (
    COD_FUNC SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    CPF TEXT UNIQUE NOT NULL,
    COD_CARGO INT,
    FOREIGN KEY (COD_CARGO) REFERENCES CARGO(COD_CARGO)
);

CREATE TABLE SERVICO (
    COD_SERVICO SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    DESCRICAO TEXT,
    PRECO NUMERIC(10, 2) NOT NULL
);

CREATE TABLE MEDICO (
    CRM INT PRIMARY KEY,
    NOME TEXT NOT NULL,
    COD_SUPERVISOR INT,
    CPF TEXT UNIQUE NOT NULL,
    COD_SUPERVISIONA INT,
    FOREIGN KEY (COD_SUPERVISOR) REFERENCES MEDICO(CRM),
    FOREIGN KEY (COD_SUPERVISIONA) REFERENCES MEDICO(CRM)
);

CREATE TABLE SUPERVISAO (
    COD_SUPERVISAO SERIAL PRIMARY KEY,
    COD_SUPERVISOR INT,
    COD_SUPERVISIONA INT,
    FOREIGN KEY (COD_SUPERVISOR) REFERENCES MEDICO(CRM),
    FOREIGN KEY (COD_SUPERVISIONA) REFERENCES MEDICO(CRM)
);

CREATE TABLE PLANO (
    COD_PLANO SERIAL PRIMARY KEY,
    NOME TEXT NOT NULL,
    VALOR_CON NUMERIC(10, 2)NOT NULL,
    VALOR_INT NUMERIC(10, 2) NOT NULL
);


CREATE TABLE PROCEDIMENTO (
    COD_PROCED SERIAL PRIMARY KEY,
    COD_FUNC INT,
    COD_SERVICO INT,
    COD_PAC INT,
    DT_ATEND DATE NOT NULL,
    VALOR NUMERIC(10, 2) NOT NULL,
    FOREIGN KEY (COD_FUNC) REFERENCES FUNCIONARIO(COD_FUNC),
    FOREIGN KEY (COD_SERVICO) REFERENCES SERVICO(COD_SERVICO),
    FOREIGN KEY (COD_PAC) REFERENCES PACIENTE(COD_PAC)
);

CREATE TABLE CONSULTA (
    COD_CONSUL SERIAL PRIMARY KEY,
    COD_PAC INT,
    CRM INT,
	COD_PLANO INT,
    MOTIVO TEXT NOT NULL,
    DT_PREV_CONSULTA DATE NOT NULL,
    DT_CONSUL DATE,
    VALOR NUMERIC(10, 2) NOT NULL,
    STATUS BOOLEAN NOT NULL,
    FOREIGN KEY (COD_PAC) REFERENCES PACIENTE(COD_PAC),
	FOREIGN KEY (COD_PLANO) REFERENCES PLANO(COD_PLANO),
    FOREIGN KEY (CRM) REFERENCES MEDICO(CRM)
);

CREATE TABLE PM (
    COD_PM SERIAL PRIMARY KEY,
    COD_MED INT,
    COD_PLANO INT,
    PRECO NUMERIC(10, 2) NOT NULL,
    FOREIGN KEY (COD_MED) REFERENCES MEDICAMENTO(COD_MED),
    FOREIGN KEY (COD_PLANO) REFERENCES PLANO(COD_PLANO)
);

CREATE TABLE APARTAMENTO (
    NUMERO INT PRIMARY KEY,
    LOCALIZACAO TEXT NOT NULL
);

CREATE TABLE INTERNACAO (
    COD_INTERNA SERIAL PRIMARY KEY,
    COD_PAC INT,
    COD_PM INT,
    CRM INT,
    NUMERO INT,
    DT_INTERNA DATE NOT NULL,
    VALOR NUMERIC(10, 2) NOT NULL,
    DT_CONCLUSAO DATE,
    MOTIVO TEXT,
    CONCLUSAO TEXT, -- ALTA OU ÓBITO
    FOREIGN KEY (COD_PAC) REFERENCES PACIENTE(COD_PAC),
    FOREIGN KEY (COD_PM) REFERENCES PM(COD_PM),
    FOREIGN KEY (CRM) REFERENCES MEDICO(CRM),
    FOREIGN KEY (NUMERO) REFERENCES APARTAMENTO(NUMERO)
);

-- Funções

CREATE TRIGGER VALIDA_PAC_TRIGGER 
BEFORE INSERT OR UPDATE OR DELETE ON PACIENTE
FOR EACH ROW 
EXECUTE FUNCTION VALIDA_PAC()

CREATE OR REPLACE FUNCTION VALIDA_PAC()
RETURNS trigger AS $$
BEGIN
IF (LENGTH(NEW.NOME) > 50) OR 
	(LENGTH(NEW.CPF) > 11) OR
	(LENGTH(NEW.CONTATO) > 20) OR
	(LENGTH(NEW.ENDERECO) > 100)THEN
	RAISE EXCEPTION 'Um ou mais valores excedem o limite de caracteres.';
END IF;

IF NEW.NOME IS NULL OR NEW.NOME = '' OR 
	NEW.CPF IS NULL OR NEW.CPF = '' OR
	NEW.CONTATO IS NULL OR NEW.CONTATO = '' OR
	NEW.ENDERECO IS NULL OR NEW.ENDERECO = '' THEN
	RAISE EXCEPTION 'Você tentou inserir um campo vazio, tente novamente.';
END IF;

-- IF (pgtype_of(NEW.NOME) != 'text') OR
--   (pgtype_of(NEW.CPF) != 'text') OR
--   (pgtype_of(NEW.CONTATO) != 'text') OR
--   (pgtype_of(NEW.ENDERECO) != 'text') THEN
--   RAISE EXCEPTION 'Você tentou inserir valores de tipo inválido, tente novamente.';
--END IF;

RETURN NEW;

EXCEPTION
WHEN unique_violation THEN
RAISE EXCEPTION 'O CPF que você inseriu já estava cadastrado, tente novamente.';

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION INSERIR_PAC(cpf TEXT, nome TEXT, contato TEXT, endereco TEXT)
RETURNS BOOLEAN AS $$
BEGIN
INSERT INTO PACIENTE VALUES(DEFAULT, cpf, nome, contato, endereco);
RETURN TRUE;
END;
$$ LANGUAGE plpgsql;


SELECT * FROM PACIENTE;

SELECT INSERIR_PAC('Aaaaaaaaaaaaaaaaaaaaaaaaaaa', 'A', 'A', 'A')

INSERT INTO PACIENTE VALUES (DEFAULT, '123131212121331-04', 'AA', 'AAAA', 'AAA')
INSERT INTO PACIENTE VALUES (DEFAULT, '321313-04', 'CC', 'CCCC', 'CCC');









